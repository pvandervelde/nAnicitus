<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Exceptions_Messages_MissingConfigurationValue_WithKey" xml:space="preserve">
    <value>A required configuration value is missing. The key for the missing configuration value is: {0}</value>
  </data>
  <data name="Log_Messages_ExternalTool_NoResponse" xml:space="preserve">
    <value>&lt;No response&gt;</value>
  </data>
  <data name="Log_Messages_FileWatcherBasedPackageUploader_DiscoveredFile_WithFilePath" xml:space="preserve">
    <value>Discovered new symbol package at: {0}</value>
  </data>
  <data name="Log_Messages_FileWatcherBasedPackageUploader_PackageDiscovery_Disabled" xml:space="preserve">
    <value>Symbol package discovery - Disabled</value>
  </data>
  <data name="Log_Messages_FileWatcherBasedPackageUploader_PackageDiscovery_Enabled" xml:space="preserve">
    <value>Symbol package discovery - Enabled</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_CleaningUpWorker" xml:space="preserve">
    <value>Cleaning up worker thread.</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_IndexingSymbol_WithPackageDetails" xml:space="preserve">
    <value>Indexing PDB file: {0}. Package ID: {1}; Version: {2}.</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_NewItemInQueue_ProcessingNotStarted" xml:space="preserve">
    <value>A new symbol package was added to the queue, but the processing of packages is turned off. Package will not be processed.</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_NewItemInQueue_StartingThread" xml:space="preserve">
    <value>New item in symbol queue. Starting processing thread.</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_NewItemInQueue_WorkerAlreadyExists" xml:space="preserve">
    <value>A new symbol package was added to the queue. The processing thread is already running. Package should be processed shortly.</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_PackageDeleteFailed_WithExceptionAndPackageDetails" xml:space="preserve">
    <value>Failed to delete the original symbol package file (ID: {1}; Version: {2}). Exception was: {0}</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_PackageMoveFailed_WithExceptionAndPackageDetails" xml:space="preserve">
    <value>Failed to move the processed package to the storage directory (ID: {1}; Version: {2}). Exception was: {0}</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_PackageNotDefined" xml:space="preserve">
    <value>A package was pushed to the queue but a null reference was pulled off the queue.</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_ProcessingFailed_WithExceptionAndPackageDetails" xml:space="preserve">
    <value>Failed while processing package (ID: {1}; Version: {2}). Exception was: {0}</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_ProcessingPackage_WithIdAndVersion" xml:space="preserve">
    <value>Processing package. ID: {0}; Version: {1}</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_ProcessSymbolsFailed_WithException" xml:space="preserve">
    <value>Failure while processing packages. Error was: {0}.</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_QueueEmpty" xml:space="preserve">
    <value>Symbol queue empty. Stopping symbol processing.</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_SourceUploadComplete_WithPackageDetails" xml:space="preserve">
    <value>Uploading of source file complete. Original path: {0}. Source server path: {1}. Package ID: {2}; Version: {3}.</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_StartingSymbolProcessing" xml:space="preserve">
    <value>Starting symbol processing.</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_StoppingProcessing" xml:space="preserve">
    <value>Stopping processing.</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_SymbolIndexingComplete_PdbStrOutput" xml:space="preserve">
    <value>Completed indexing of PDB file. PdbStr output: {0}</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_SymbolIndexingComplete_WithPackageDetails" xml:space="preserve">
    <value>Completed indexing of PDB file: {0}. Package ID: {1}; Version: {2}.</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_SymbolUploadComplete_WithPackageDetails" xml:space="preserve">
    <value>Upload of symbol complete for PDB file: {0}. Package ID: {1}; Version: {2}.</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_UploadingSources_WithPackageDetails" xml:space="preserve">
    <value>Uploading source file to source server. Original path: {0}. Source server path: {1}. Package ID: {2}; Version: {3}.</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_UploadingSymbols_SymStoreOutput" xml:space="preserve">
    <value>Upload of symbols complete. SymStore output: {0}</value>
  </data>
  <data name="Log_Messages_SymbolIndexer_UploadingSymbols_WithPackageDetails" xml:space="preserve">
    <value>Uploading symbols for PDB file: {0}. Package ID: {1}; Version: {2}. </value>
  </data>
  <data name="Log_Messages_SymbolIndexer_PackageLoadingFailed_WithException" xml:space="preserve">
    <value>Loading of package failed. Error was: {0}.</value>
  </data>
  <data name="Log_Messages_PackageLoadCountBeyondMaximum_WithPackagePath" xml:space="preserve">
    <value>The package could not be processed. Package path is: {0}.</value>
  </data>
</root>